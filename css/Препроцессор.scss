/*----------------------------------------------*/
/*
  1. В препроцессоре конкатенировать переменную в строку используется такой синтаксис  '#{}' немного от js
     отличается `${}`. В циклах опустить ''
}

*/
/*###----<{ Вложенности }>---#####*/
/*
  Если в scss делать большую вложенность в друг друга, то в css будет строиться цепочка из селекторов
  .block ul li a <- такие вложенности лучше не делать 
*/
.block{
  padding: 10px;
  >p{}/*.block>p>div>p   Знак ">" равносилен body > p - это обратиться к 1му "p", а не ко всем вложенным "p"  */ 
  span{ color: #000;}
   
  &__text{}//& это родитель. обращение .block__text{}
  &.block__content{}//обычная последовательность классов .block .block__content{}
  &:hover{}
  &.link{}// обращение одно и тоже .block &{}, но в .link
}
.link{
  .block &{} //&.link{}
}
/*###----<{ Переменные }>---#####*/
/*
  Переменные отличаются от css. Там используется
  :root{  --fz: 80px; } и далее
  .link{  font-size: var(--fz); }
  
  
*/
$fz: 80px;
.link{
  font-size: $fz;
}
/*----------------------------------------------*/
/*###----<{ Шаблоны }>---#####*/
/*
  Зачем писать по 100 раз. Есть 2 способа подключения шаблона.
  Способ с % хорош тем что он не будет перемещён в css если он ни где не использовался, а если использовался
  то перемещаются его свойства и имя шаблона ни где не фигурирует.

  Шаблон обычным классом .nameTemplate будет создан в css так же как обычный класс и там где мы его подключаем
  в css перед селектором будет этот класс.
  Положение шаблона имеет значение.
*/
%nameTemplate{
  font-size: 20px;
  color: red;
}
.link:first-child{
  @extend %nameTemplate;
  width: 40px;
}
.link:last-child{
  @extend %nameTemplate;
  width: 50px;
}
/*----------------------------------------------*/
/*###----<{ Миксины (примеси) }>---#####*/
/*
  Это обычные функции только синтаксис свой. Обычный шаблон это статичные повторяющиеся свойства,
  mixin это повторяющиеся свойства но индивидуальные значения. Укорачивает в какой-то степени код 
*/
@mixin myMixin($a, $b) {
  font-size: $a;
  color: $b;

  @content;/*если при подключении миксина развернуть и дополнить контентом, то @content развернёт данные */
}

.link{
  @include myMixin(25px, green);


  @include myMixin(25px, green) {
    // @content; служит для расширения миксина. Нафига это надо если можно использовать миксин и дополнить сам класс.
    // проверить нужно как миксин будет работать дальше по структуре после расширения
    background-color: #fff;
  }
}
/*----------------------------------------------*/
/*###----<{ математика }>---#####*/
//не нужно использовать calc
.block{
  width: (300px / 960px * 100%);//31.25%. 
  max-width: 500px;/*детали. максимальная это не значит что она такой будет*/
  width: 100%;/*вот теперь на максимальную ширину*/
  /*
   Иногда требуется узнать  сколько % блок в 300px занимает от родителя.
   Варианты.
   1. 960 / 100 = n   300 / n = результат% 
   2. 300px / 960px * 100% сокращённый вариант
  */
}

/*----------------------------------------------*/
/*###----<{ Условие и циклы }>---#####*/


.block{
  $rand: random(24);// выдаст число в диапазоне до 24 
  
  @if($a > 2){

  }
  @else{

  }

// Числа от 10 до 19 будут присваиваться в $b
  @for $b from 10 to 20 {
    
  }

  @each $var in list {
    
  }
}



