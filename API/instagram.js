/*
  В facebook очень много раз повторяют одно и тоже. Каждый подзаголовок получения данных из инстаграм начинается с 1го пункта
  который говорит как получить токен и получить разрешение и так половина документации. После получения токена в разделе 
   Руководство -> Получение профилей и медиа файлов Читать везде только Шаг 2.

  1. Вкратце: Данные в API состоят из информации о пользователях Instagram и их медиафайлах (изображениях, видео, альбомах).
            и требуется послать запрос к пользователю на разрешение этих данных scope= user_profile, user_media. 

  2. Запросы имеют ограничение запросов в течении одного часа:
     есть токен доступа приложения или пользователя - это ограничение по платформы,
     токен доступа системного пользователя или токен доступа к Странице - коммерческое ограничения

     Ограничения числа обращений платформы отслеживаются на уровне каждого отдельного пользователя.
     Есть какая то формула: Количество вызовов в течение одного часа = 200 * количество пользователей

   Например, если у приложения 100 пользователей, оно может делать 20 000 вызовов в час. 
   При этом 19 000 из них может поступать от 10 самых активных пользователей.

   Пользователь с одного компьютера может заходить на несколько наших сайтов(приложений), число обращений к данным instagram будут складываться
   до ограничения.

  Возвращаемые заголовки . Что-то не нашёл.
    call_count - Целое число, представляющее процент вызовов, которые приложение выполнило в течение скользящего одночасового окна.
    total_cputime - Целое число, представляющее процент времени ЦП, выделенный на обработку запросов.
    total_time - Целое число, представляющее процент общего времени, выделенный на обработку запросов.

    Вообщем когда будут достигнуто пользователем ограничение будет приходить код ошибки. Если понадобиться читать 
    https://developers.facebook.com/docs/graph-api/overview/rate-limiting#platform-rate-limits



  3. После завершения тестирования нужно подать заявку на разрешение предоставлять доступ к данным других пользователей.
      Приложение проверят, если всё нормально то пользователи заходить в моё приложение, авторизироваться там через instagram,
      после чего им придёт окно соглашения как я понял и я смогу транспортировать им их же данные из инсты.
      Что-то то не совсем разобрался. Мне выдавать токен просто будут?
*/


/*
  После того как в facebook привязали сайт, и привязали в "Роли" Тестировщики instagram, сам аккаунт инстаграм,
  и зашли в инстаграм в настройках дали добро, нужно теперь Авторизировать этого пользователя, что бы он перешёл в 
  активные в инстаграме.

 

1й. ЭТАП. Авторизация тестировщика для получения данных с instagram

  В facebook нужно взять ID приложения Instagram - (не путать с id приложения)

  get параметры. 
      Обязательны
  client_id= ID приложения Instagram
  redirect_uri= сайт который привязали и на который перекинет в url котором будет лежать код
  response_type=code - прямо так и указывается ни чё выдумывать не надо
  scope= user_profile, user_media   - на что спрашиваем разрешение на доступ к ресурсам. user-profile обязательно, 
                                       user_media - ну мыж за фото пришли так что тоже
      Не обязательный
  state=1  - включает защиту от CSRF (межсайтовой подделки запросов). Сильно не углублялся в эту тему, так что опустим этот момент.

  Что бы авторизировать тестировщика нужно в браузере указать

    https://api.instagram.com/oauth/authorize
    ?client_id=1282180578814059
    &redirect_uri=https://singlebw.github.io/lending2/
    &scope=user_profile,user_media
    &response_type=code

    Вылезет окно, соглашаемся. И нас должно перенести на сайт 
    https://singlebw.github.io/lending2/?code= Здесь выдадут нам код #_

    Код копировать до #. Он действует 1 час и пригодиться для получения access_token.

    ВАЖНО: На самом деле его можно получить зайдя в facebook выбрав Instagram Basic Display -> Basic Display спустится
           до User Token Generator и Generate Token который будет действовать 60 дней. Но пойдём дальше посмотрим к чему приведёт
           документация.

   
-------------------------------------------------------------------------------------------------
2й. ЭТАП.  Обменять код на временный токен. 
 Отправить нужно POST запрос, так что браузер не подходит.
  Для этого понадобиться: опять ID приложения Instagram, далее Секрет приложения Instagram и полученный ранее код 

  get параметры
  client_id= снова ID приложения Instagram
  client_secret=  Секрет приложения Instagram
  grant_type=authorization_code   -  как есть оставляем. 
  redirect_uri= всё тот же зарегистрированный сайт
  code= тут уже вводить код полученный ранее




  https://api.instagram.com/oauth/access_token \ -F 
  client_id= ID приложения Instagram  \ -F 
  client_secret= Секрет приложения Instagram \ -F 
  grant_type=authorization_code \ -F                 
  redirect_uri=https://singlebw.github.io/lending2/ \ -F 
  code= здесь код


  ОШИБКА в запросе выглядит так:
    { "error_type": "OAuthException", "code": 400, "error_message": "Matching code was not found or was already used" }



-------------------------------------------
- Получение токена требует client_secret поэтому такой запрос нельзя делать с клиентской части через ajax который будет в bundle т.к. любой может открыть файл
  Делается это с сервера.
- А что будет когда действие токена закончится? Нужно будет обновить. Об этом ниже.
-------------------------------------------

  Предположим получили токен. В этом запросе выше нам так же дадут user_id, и должны дать media-id
  но их можно опустить использовав
  конструкцию .../me?fields= вместо  .../user-id?fields=  или .../media-id?fields=  

  Полученный таким способом токен действует 1 час.

-------------------------------------------------------------------------------------------------
3й. ЭТАП. Обновление токена на долгосрочный 

На всякий приложу здесь.
  Говорят что токены для закрытых аккаунтов нельзя обменять. Если пользователь приложения переведет свой аккаунт 
  из общедоступного режима в закрытый, его токен доступа станет недействительным.
  Но это не про нас.

  Если время токена закончиться, то его уже нельзя будет обносить. Как я понял это о долгосрочном токене в 60 дней.
  Нужно в течении 2х месяцев обновлять.

  Получение долгосрочного: Я получал его в личном кабинете но есть альтернатива.
    1. нужно разрешение instagram_graph_user_profile.   {scope=user_profile}
    2. нужен краткосрочный токен


  GET параметры. Запрос на .../access_token
      grant_type=ig_exchange_token   -  оставить как есть.
      client_secret={секретный код instagram}
      access_token={краткосрочный токен, который ещё действителен}


Пример через curl. Запросы через сервер т.к. секрет стоит.
      curl -X GET \ 'https://graph.instagram.com/access_token?grant_type=ig_exchange_token&&client_secret=12345&&access_token=IGQVJ...'

Получим ответ:
  { "access_token": "{долгосрочный токен}", "token_type": "{тип bearer}", "expires_in": {Количество секунд до окончания срока долгосрочного токена.} }


<<<{{{{ Обмен долгосрочного токена на новый долгосрочный}}}}>>>

   GET параметры. Запрос на .../refresh_access_token
      grant_type=ig_refresh_token - так оставляем
      access_token={долгосрочный токен, который ещё действителен}"

  Пример:
      curl -i -X GET "https://graph.instagram.com/refresh_access_token?grant_type=ig_refresh_token&access_token=IGQVJ..."

Получим такой же объект как описал выше


*/


 /*--------------------------------------------------------------------------------------*/
 /*########---------<{ Получение данных профиля }>-------######## 
  1. Получение данных профиля или медиаданых в get запросе всегда в конце должен указываться токен, так что опущу его сократив описание
  2. Если требуется получить только id, то поле fields можно опустить. Работает и для профиля и медиа


  https://graph.instagram.com/me || передать полученный ранее user_id ? fields=id,username &access_token= вести токен

   Возможные get параметры (что хотим получить о профиле инстаграм)на /me?fields=
    id - ID пользователя аккаунта.
    account_type - Тип аккаунта пользователя. Варианты: BUSINESS, MEDIA_CREATOR, PERSONAL.
    media_count - Количество существующих медиа-файлов.
    username - Имя пользователя аккаунта


  Пример запроса через curl:
  curl -X GET \ 'https://graph.instagram.com/me?fields=id,username&access_token=IGQVJWWWlLQ0p2TjVDeEQxdXFQSUVkMmpNZAHVuajRyZAm94ckZAPY1FHQVRycHI0N3BQZAEJGZAHpwUWVsXzAzbXlzelQ3YXN4a3JtTHJYbDEwSzR0UnpILVdFVDBtWC1DOVRtLUZAJNXNRcWdGQ2o0MjAyaAZDZD'
  или axios
*/
let access_token = 'IGQVJWWWlLQ0p2TjVDeEQxdXFQSUVkMmpNZAHVuajRyZAm94ckZAPY1FHQVRycHI0N3BQZAEJGZAHpwUWVsXzAzbXlzelQ3YXN4a3JtTHJYbDEwSzR0UnpILVdFVDBtWC1DOVRtLUZAJNXNRcWdGQ2o0MjAyaAZDZD';
let url =  'https://graph.instagram.com/me'

axios.get(url, {params: {fields: 'id, username',access_token }})
.then((data)=>{ console.dir(data);})
.catch((err)=>{ console.dir(err);})
 

/*-----------------------------------------------------------------------------*/
/*#######---------<{ Получение медиа файлов }>---------######
  медиа файлы приходят по 25 шт. о навигации раздел ниже

  https://graph.instagram.com/me/media?fields=

  Медиа поля(fields)
    caption - Подпись к изображению или видео. Для медиафайлов в альбомах не возвращается.
    id - ID медиафайла.
    media_type - Тип медиафайла. Возможные варианты: IMAGE, VIDEO, CAROUSEL_ALBUM.
    media_url - URL медиафайла.
    permalink - Постоянный URL медиафайла. Если медиафайл содержит материалы, защищенные авторскими правами, или был помечен как нарушающий авторские права, поле не будет отображаться.
    thumbnail_url - URL миниатюры медиафайла. Доступно только для типа VIDEO.
    timestamp - Дата публикации медиафайла в формате ISO 8601.
    username - Имя пользователя, опубликовавшего медиафайл.
    children - чуть ниже о нём. если коротко о fields то присылает объект

      т.к. в инстаграм фото по большей степени в альбомах, и media_type альбома CAROUSEL_ALBUM
      запрашивая media_url мы получаем 1ю фотку этого альбома. Если нам нужны фотки альбома то нужно взять id альбома и 
      сделать такой запрос:

  https://graph.instagram.com/id альбома/children?fields='media_url,media_type'

    children можно указать в field тогда помимо запрашиваемых полей будет поле children с объектом в котором ключ data с массивом id фотографий альбома. 
    
    children: {data: [{id: '...'},{id: '...'}]}

  Ну раз в запросе можно указывать id то можно получить данные конкретной фотографии 
      
  https://graph.instagram.com/id фотки?fields='media_url,media_type'

*/

/*-----------------------------------------------------------------------------*/
/*#######---------<{ Навигация по данным }>---------######

  При обращении к медиа данным получаем 2 объекта data с данными и объект paging

  paging: {
    cursors: {
      after:
      before: 
    } 
    next: - ссылка на следующий запрос
    previous: - ссылка на предыдущий запрос
  } 

  По сути если нам нужно получить следующую партию альбомов из 25 шт нам нужно делать запрос в запросе

*/

/*#####--------<{ Общие сведения }>--------#######*/

/*

GET   .../oauth/authorize  -  Получение окна авторизации.
POST  .../oauth/access_token  -  Обмен кода авторизации на краткосрочный токен доступа пользователя Instagram.
GET   .../access_token  -  Обмен краткосрочного токена доступа пользователя Instagram на долгосрочный.
GET   .../refresh_access_token  -  Обновление долгосрочного токен доступа пользователя Instagram.
GET   .../oauth/authorize  -  окно авторизации


GET   .../{media-id}  -  Получение полей и границ контекста изображения, видео или альбома.
GET   .../{media-id}/children  -  Получение списка изображений и видео альбома.
GET   .../{user-id}/media  -  Получение списка изображений, видео или альбомов пользователя.

GET   .../me  -  Получение полей и границ контекста пользователя.
GET   .../{user-id}  -  Получение полей и границ контекста пользователя.
GET   .../{user-id}/media  -  Получение списка изображений, видео или альбомов пользователя.
*/