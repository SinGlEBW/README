(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _excluded = ["data"],
    _excluded2 = ["caller", "callee"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

addEventListener('DOMContentLoaded', function () {
  var localVideo = document.getElementById('localWebRTC');
  var remoteVideo = document.getElementById('remoteWebRTC');
  var btnStart = document.getElementById("btn-video-start");
  var btnStop = document.getElementById("btn-video-stop");
  var callButton = document.getElementById('btn-video-call'); //возможные ограничения

  var constraints = {
    video: {
      advanced: [{
        height: 150
      }],
      height: 300,
      width: 300
    },
    audio: true
  };
  var iceServers = [{
    urls: "turn:bot.ruitb.ru:5349?transport=tcp",
    username: "telemed1",
    credential: "Lomwe675Df",
    credentialType: "password"
  }, {
    urls: "stun:stun.stunprotocol.org"
  }, {
    urls: "turn:bot.ruitb.ru:5349",
    username: "telemed1",
    credential: "Lomwe675Df",
    credentialType: "password"
  }, {
    urls: "turn:bot.ruitb.ru:3478",
    username: "telemed1",
    credential: "Lomwe675Df",
    credentialType: "password"
  }, {
    urls: "stun:bot.ruitb.ru:3478",
    username: "telemed1",
    credential: "Lomwe675Df",
    credentialType: "password"
  }];
  var videoClose;
  btnStart.addEventListener("click", videoStart, false);
  btnStop.addEventListener('click', function () {
    typeof videoClose === 'function' && videoClose();
  });
  /*------------------------------------------------------------------------------------------------------------------------------------------*/

  /*------------------------------------------------------------------------------------------------------------------------------------------*/

  function videoStart() {
    return _videoStart.apply(this, arguments);
  }

  function _videoStart() {
    _videoStart = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var mediaStream, videoTracks, audioContext;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return navigator.mediaDevices.getUserMedia({
                video: {
                  brightness: 200,
                  height: 500
                },
                audio: true
              });

            case 2:
              mediaStream = _context4.sent;
              videoTracks = mediaStream.getVideoTracks()[0];

              videoClose = function videoClose() {
                videoTracks.stop();
              };

              audioContext = useAudioContext(mediaStream);
              localVideo.srcObject = mediaStream;
              createConnectP2P(mediaStream);

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return _videoStart.apply(this, arguments);
  }

  function createConnectP2P(mediaStream) {
    var peerConnection = new RTCPeerConnection({
      iceServers: iceServers,
      iceTransportPolicy: 'relay'
    });
    var dataChanel = peerConnection.createDataChannel('testChanel');
    mediaStream.getTracks().forEach(function (track) {
      return peerConnection.addTrack(track, mediaStream);
    });
    /*#########----------<{ Event Chanel }>---------###########*/
    //Открывается соединение после обмена offer, answer  

    dataChanel.addEventListener('open', function (e) {
      console.dir('Канал открыт');
    });
    dataChanel.addEventListener('message', function (e) {
      console.log('Message: ', e.data);
    });
    peerConnection.addEventListener('datachannel', function (e) {
      console.dir('Передача канала');
    });
    peerConnection.addEventListener('track', function (e) {
      console.log('Получение track', e);
      remoteVideo.srcObject = e.streams[0];
    });
    /*#########----------<{ Event peerConnection }>---------###########
      icecandidate - отрабатывает если вызвали createOffer и передали данные в 
                     peerConnection.setLocalDescription(offerMetaData)
    */

    peerConnection.addEventListener('negotiationneeded', function (e) {
      console.dir(e);
    });
    createWebSocketConnect(peerConnection);
  }
  /*------------------------------------------------------------------------------------------------------------------------------------------*/


  function createWebSocketConnect(peerConnection) {
    var socket = new WebSocket("ws://localhost:4000");
    socket.addEventListener('close', function (e) {
      console.log('Соединение с сервером WS разорвано');
    });
    socket.addEventListener('error', function (e) {
      console.log('Ошибка соединения с сервером WS разорвано');
    });
    socket.addEventListener('open', function (e) {
      console.log('Соединение с сервером WS установленно');
      var clientId = uuid4(); // caller - вызывающий, callee - вызываемый

      console.log(clientId, 'clientId');

      var sendWS = function sendWS(payload) {
        socket.send(JSON.stringify(payload));
      };

      sendWS({
        type: 'peer',
        clientId: clientId,
        room: ''
      });
      peerConnection.addEventListener('icecandidate', function (e) {
        e.candidate && sendWS({
          type: 'candidate',
          candidate: e.candidate
        });
      });
      socket.addEventListener('message', /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
          var data, e;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  data = _ref.data, e = _objectWithoutProperties(_ref, _excluded);
                  data = JSON.parse(data);
                  _context.t0 = data.type;
                  _context.next = _context.t0 === 'peer' ? 5 : _context.t0 === 'initID' ? 7 : _context.t0 === 'candidate' ? 9 : _context.t0 === 'offer' ? 11 : _context.t0 === 'answer' ? 13 : 15;
                  break;

                case 5:
                  data.clientId !== clientId && sendWS({
                    type: 'initID',
                    caller: clientId,
                    callee: data.clientId
                  });
                  return _context.abrupt("break", 16);

                case 7:
                  data.caller === clientId && createOffer(peerConnection, sendWS, data);
                  return _context.abrupt("break", 16);

                case 9:
                  peerConnection.addIceCandidate(data.candidate);
                  return _context.abrupt("break", 16);

                case 11:
                  data.callee === clientId && createAnswer(peerConnection, sendWS, data);
                  return _context.abrupt("break", 16);

                case 13:
                  data.caller === clientId && peerConnection.setRemoteDescription(data);
                  return _context.abrupt("break", 16);

                case 15:
                  return _context.abrupt("break", 16);

                case 16:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x) {
          return _ref2.apply(this, arguments);
        };
      }());
    });
  }
  /*--------------------------------------------------------------------------------------------------------------*/


  var createOffer = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(peerC, sendWS, _ref3) {
      var caller, callee, _yield$peerC$createOf, type, sdp;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              caller = _ref3.caller, callee = _ref3.callee;
              peerC.clientID = {
                caller: caller,
                callee: callee
              };
              _context2.next = 4;
              return peerC.createOffer({
                offerToReceiveAudio: true,
                offerToReceiveVideo: true
              });

            case 4:
              _yield$peerC$createOf = _context2.sent;
              type = _yield$peerC$createOf.type;
              sdp = _yield$peerC$createOf.sdp;
              _context2.next = 9;
              return peerC.setLocalDescription({
                type: type,
                sdp: sdp
              });

            case 9:
              sendWS({
                type: type,
                sdp: sdp,
                caller: caller,
                callee: callee
              });

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function createOffer(_x2, _x3, _x4) {
      return _ref4.apply(this, arguments);
    };
  }();

  var createAnswer = /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(peerC, sendWS, _ref5) {
      var caller, callee, dataPeer, _yield$peerC$createAn, type, sdp;

      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              caller = _ref5.caller, callee = _ref5.callee, dataPeer = _objectWithoutProperties(_ref5, _excluded2);
              peerC.clientID = {
                caller: caller,
                callee: callee
              };
              _context3.next = 4;
              return peerC.setRemoteDescription(dataPeer);

            case 4:
              _context3.next = 6;
              return peerC.createAnswer();

            case 6:
              _yield$peerC$createAn = _context3.sent;
              type = _yield$peerC$createAn.type;
              sdp = _yield$peerC$createAn.sdp;
              _context3.next = 11;
              return peerC.setLocalDescription({
                type: type,
                sdp: sdp
              });

            case 11:
              sendWS({
                type: type,
                sdp: sdp,
                caller: caller,
                callee: callee
              });

            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function createAnswer(_x5, _x6, _x7) {
      return _ref6.apply(this, arguments);
    };
  }();
});
/*------------------------------------------------------------------------------------------------------------------------------------------ */

var optionsAudio = {
  filter: {
    type: 'highpass',
    frequency: 10000
  },
  gain: {
    value: 0.5
  }
};

function useAudioContext(mediaStream) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : optionsAudio;
  var filter = options.filter,
      gain = options.gain;
  var audioContext = new AudioContext();
  var audioStream = audioContext.createMediaStreamSource(mediaStream);
  var audioFilter = audioContext.createBiquadFilter();
  audioFilter.type = filter.type;
  audioFilter.frequency.value = filter.frequency;
  var audioGain = audioContext.createGain();
  audioGain.gain.value = gain.value;
  audioStream.connect(audioFilter.connect(audioGain));
  return audioContext;
}
/*
  Blob можно превратить в URL такого вида:
  blob:http://127.0.0.1:5500/ac67d59c-3e02-4cb2-a0df-33a53afeeb2c

  Способ сделать фото с камеры:
      let capture = new ImageCapture(videoTrack);
      capture.takePhoto().then(async (blob)=>{
        let objectURL = URL.createObjectURL(blob);
        console.dir(objectURL);
        elImg.setAttribute('src', objectURL)
      })
*/

/*#########--------<{ WebSocked }>------####### 
extensions: ""
onclose: null
onerror: null
onmessage: null
onopen: null//отрабатывает если есть подключение к ws серверу
//методы
send
close
*/
// function createWebSocketConnect(peerConnection){
//   let socket = new WebSocket("ws://localhost:4000");
//   socket.addEventListener('close', (e) => { console.log('Соединение с сервером WS разорвано'); });
//   socket.addEventListener('error', (e) => { console.log('Ошибка соединения с сервером WS разорвано'); });
//   socket.addEventListener('open',  (e) => {
//     console.log('Соединение с сервером WS установленно'); 
//     let clientId = uuid4();     // caller - вызывающий, callee - вызываемый
//     console.log(clientId, 'clientId');
//     const sendWS = (payload) => { socket.send(JSON.stringify(payload)) }
//     sendWS({ type: 'peer', clientId, room: '' });
//     peerConnection.addEventListener('icecandidate', (e) => {
//       (e.candidate) && sendWS({ type: 'candidate', candidate: e.candidate });
//     })
//     socket.addEventListener('message', async ({data, ...e}) => {
//       data = JSON.parse(data);
//       switch (data.type) {
//         case 'peer': (data.clientId !== clientId) && sendWS({type: 'initID', caller: clientId, callee: data.clientId }); break;
//         case 'initID': (data.caller === clientId) && createOffer(peerConnection, sendWS, data); break;          
//         case 'candidate': peerConnection.addIceCandidate(data.candidate); break;      
//         case 'offer': (data.callee === clientId) && createAnswer(peerConnection, sendWS, data); break;
//         case 'answer': (data.caller === clientId) && peerConnection.setRemoteDescription(data); break;
//         default: break;
//       }
//     })
//   })
// }


function uuid4() {
  function hex(s, b) {
    return s + (b >>> 4).toString(16) + // high nibble
    (b & 15).toString(16); // low nibble
  }

  var r = crypto.getRandomValues(new Uint8Array(16));
  r[6] = r[6] >>> 4 | 64; // Set type 4: 0100

  r[8] = r[8] >>> 3 | 128; // Set variant: 100

  return r.slice(0, 4).reduce(hex, '') + r.slice(4, 6).reduce(hex, '-') + r.slice(6, 8).reduce(hex, '-') + r.slice(8, 10).reduce(hex, '-') + r.slice(10, 16).reduce(hex, '-');
}

},{}],2:[function(require,module,exports){
"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

addEventListener('DOMContentLoaded', function () {
  var localVideo = document.getElementById('localWebRTC');
  var remoteVideo = document.getElementById('remoteWebRTC');
  var btnStart = document.getElementById("btn-video-start");
  var btnStop = document.getElementById("btn-video-stop");
  var callButton = document.getElementById('btn-video-call');
  var selectChanel = document.getElementById('select-rtc-chanel'); //возможные ограничения

  var constraints = {
    video: {
      advanced: [{
        height: 150
      }],
      height: 300,
      width: 300
    },
    audio: true
  };
  var iceServers = [{
    urls: "turn:bot.ruitb.ru:5349?transport=tcp",
    username: "telemed1",
    credential: "Lomwe675Df",
    credentialType: "password"
  }, {
    urls: "stun:stun.stunprotocol.org"
  }, {
    urls: "turn:bot.ruitb.ru:5349",
    username: "telemed1",
    credential: "Lomwe675Df",
    credentialType: "password"
  }, {
    urls: "turn:bot.ruitb.ru:3478",
    username: "telemed1",
    credential: "Lomwe675Df",
    credentialType: "password"
  }, {
    urls: "stun:bot.ruitb.ru:3478",
    username: "telemed1",
    credential: "Lomwe675Df",
    credentialType: "password"
  }];
  var disconnect;
  var connection = true;
  btnStart.addEventListener("click", function () {
    connection && p2pConnect();
  });
  btnStop.addEventListener('click', function () {
    typeof disconnect === 'function' && disconnect();
    connection = true;
  });
  /*------------------------------------------------------------------------------------------------------------------------------------------*/

  /*------------------------------------------------------------------------------------------------------------------------------------------*/

  function p2pConnect() {
    return _p2pConnect.apply(this, arguments);
  }

  function _p2pConnect() {
    _p2pConnect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var peerConnection, socket, mediaStream, tracks;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              connection = false;
              peerConnection = createConnectP2P();
              socket = createWebSocketConnect(peerConnection);
              _context4.next = 5;
              return navigator.mediaDevices.getUserMedia({
                video: {
                  brightness: 200,
                  height: 500
                },
                audio: true
              });

            case 5:
              mediaStream = _context4.sent;
              tracks = mediaStream.getTracks(); // localVideo.srcObject = mediaStream;
              // tracks.forEach(track => peerConnection.addTrack(track, mediaStream));

              disconnect = function disconnect() {
                socket.close();
                tracks.forEach(function (track) {
                  return track.stop();
                });
                peerConnection.close();
              };

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return _p2pConnect.apply(this, arguments);
  }

  function createConnectP2P() {
    var peerConnection = new RTCPeerConnection({
      iceServers: iceServers,
      iceTransportPolicy: 'relay'
    });
    var dataChanel = peerConnection.createDataChannel('testChanel');
    peerListen(peerConnection, dataChanel, remoteVideo);
    return peerConnection;
  }

  function peerListen(peerConnection, dataChanel, elRemoteVideo) {
    dataChanel.addEventListener('open', function (e) {
      console.dir('Канал p2p открыт');
    });
    dataChanel.addEventListener('close', function (e) {
      console.dir('Канал p2p закрыт');
    });
    dataChanel.addEventListener('message', function (e) {
      console.log('Message по p2p: ', e.data);
    });
    peerConnection.addEventListener('datachannel', function (e) {
      console.dir('Передача канала');
    });
    peerConnection.addEventListener('track', function (e) {
      console.log('Получение videoTrack', e);
      elRemoteVideo.srcObject = e.streams[0];
    });
    peerConnection.addEventListener('negotiationneeded', function (e) {
      console.log('Переговоры p2p', e);
    });
  }
  /*------------------------------------------------------------------------------------------------------------------------------------------*/


  function createWebSocketConnect(peerConnection) {
    var socket = new WebSocket("ws://localhost:4000");
    var clientId = uuid4(); // caller - вызывающий, callee - вызываемый

    var sendWS = function sendWS(payload) {
      socket.send(JSON.stringify(payload));
    };

    function toggleChanel(e) {
      sendWS({
        type: 'updateChanel',
        clientId: clientId,
        room: selectChanel.value
      });
    }

    socket.addEventListener('close', function (e) {
      console.log('Соединение с сервером WS разорвано');
      selectChanel.removeEventListener('change', toggleChanel);
    }); //

    socket.addEventListener('error', function (e) {
      console.log('Ошибка соединения с сервером WS разорвано');
    });
    socket.addEventListener('error', function (e) {
      console.log('Ошибка соединения с сервером WS разорвано');
    });
    socket.addEventListener('open', function (e) {
      console.log('Соединение с сервером WS установленно');
      console.log(clientId, 'clientId');
      sendWS({
        type: 'peer',
        clientId: clientId,
        room: selectChanel.value
      });
      createWebSocketConnectTest(peerConnection, socket, sendWS);
      selectChanel.addEventListener('change', toggleChanel);
    });
    return socket;
  }

  function createWebSocketConnectTest(peerConnection, socket, sendWS) {
    peerConnection.onnegotiationneeded = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.t0 = peerConnection;
              _context.next = 4;
              return peerConnection.createOffer();

            case 4:
              _context.t1 = _context.sent;
              _context.next = 7;
              return _context.t0.setLocalDescription.call(_context.t0, _context.t1);

            case 7:
              console.dir(peerConnection.localDescription);
              sendWS({
                desc: peerConnection.localDescription
              });
              _context.next = 14;
              break;

            case 11:
              _context.prev = 11;
              _context.t2 = _context["catch"](0);
              console.error(_context.t2);

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 11]]);
    }));

    peerConnection.onicecandidate = function (_ref2) {
      var candidate = _ref2.candidate;
      return sendWS({
        candidate: candidate
      });
    };

    peerConnection.ontrack = function (event) {
      !remoteView.srcObject && (remoteView.srcObject = event.streams[0]);
    };

    socket.onmessage = /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3) {
        var desc, candidate, stream;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                desc = _ref3.desc, candidate = _ref3.candidate;
                _context2.prev = 1;

                if (!desc) {
                  _context2.next = 20;
                  break;
                }

                _context2.t0 = desc.type;
                _context2.next = _context2.t0 === 'offer' ? 6 : _context2.t0 === 'answer' ? 12 : 15;
                break;

              case 6:
                _context2.next = 8;
                return navigator.mediaDevices.getUserMedia({
                  video: true,
                  audio: true
                });

              case 8:
                stream = _context2.sent;
                stream.getTracks().forEach(function (track) {
                  return peerConnection.addTrack(track, stream);
                });
                createOffer();
                return _context2.abrupt("break", 20);

              case 12:
                _context2.next = 14;
                return peerConnection.setRemoteDescription(desc);

              case 14:
                return _context2.abrupt("break", 20);

              case 15:
                _context2.t1 = candidate;

                if (!_context2.t1) {
                  _context2.next = 19;
                  break;
                }

                _context2.next = 19;
                return pc.addIceCandidate(candidate);

              case 19:
                return _context2.abrupt("break", 20);

              case 20:
                _context2.next = 25;
                break;

              case 22:
                _context2.prev = 22;
                _context2.t2 = _context2["catch"](1);
                console.error(_context2.t2);

              case 25:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[1, 22]]);
      }));

      return function (_x) {
        return _ref4.apply(this, arguments);
      };
    }();

    var createOffer = /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(pc, sendWS, desc) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return pc.setRemoteDescription(desc);

              case 2:
                _context3.t0 = pc;
                _context3.next = 5;
                return pc.createAnswer();

              case 5:
                _context3.t1 = _context3.sent;
                _context3.next = 8;
                return _context3.t0.setLocalDescription.call(_context3.t0, _context3.t1);

              case 8:
                sendWS({
                  desc: pc.localDescription
                });

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function createOffer(_x2, _x3, _x4) {
        return _ref5.apply(this, arguments);
      };
    }();
  }
});
/*------------------------------------------------------------------------------------------------------------------------------------------ */

/*
  Blob можно превратить в URL такого вида:
  blob:http://127.0.0.1:5500/ac67d59c-3e02-4cb2-a0df-33a53afeeb2c

  Способ сделать фото с камеры:
      let capture = new ImageCapture(videoTrack);
      capture.takePhoto().then(async (blob)=>{
        let objectURL = URL.createObjectURL(blob);
        console.dir(objectURL);
        elImg.setAttribute('src', objectURL)
      })
*/

/*#########--------<{ WebSocked }>------####### 
extensions: ""
onclose: null
onerror: null
onmessage: null
onopen: null//отрабатывает если есть подключение к ws серверу
//методы
send
close
*/
// function createWebSocketConnect(peerConnection){
//   let socket = new WebSocket("ws://localhost:4000");
//   socket.addEventListener('close', (e) => { console.log('Соединение с сервером WS разорвано'); });
//   socket.addEventListener('error', (e) => { console.log('Ошибка соединения с сервером WS разорвано'); });
//   socket.addEventListener('open',  (e) => {
//     console.log('Соединение с сервером WS установленно'); 
//     let clientId = uuid4();     // caller - вызывающий, callee - вызываемый
//     console.log(clientId, 'clientId');
//     const sendWS = (payload) => { socket.send(JSON.stringify(payload)) }
//     sendWS({ type: 'peer', clientId, room: '' });
//     peerConnection.addEventListener('icecandidate', (e) => {
//       (e.candidate) && sendWS({ type: 'candidate', candidate: e.candidate });
//     })
//     socket.addEventListener('message', async ({data, ...e}) => {
//       data = JSON.parse(data);
//       switch (data.type) {
//         case 'peer': (data.clientId !== clientId) && sendWS({type: 'initID', caller: clientId, callee: data.clientId }); break;
//         case 'initID': (data.caller === clientId) && createOffer(peerConnection, sendWS, data); break;          
//         case 'candidate': peerConnection.addIceCandidate(data.candidate); break;      
//         case 'offer': (data.callee === clientId) && createAnswer(peerConnection, sendWS, data); break;
//         case 'answer': (data.caller === clientId) && peerConnection.setRemoteDescription(data); break;
//         default: break;
//       }
//     })
//   })
// }

function uuid4() {
  function hex(s, b) {
    return s + (b >>> 4).toString(16) + // high nibble
    (b & 15).toString(16); // low nibble
  }

  var r = crypto.getRandomValues(new Uint8Array(16));
  r[6] = r[6] >>> 4 | 64; // Set type 4: 0100

  r[8] = r[8] >>> 3 | 128; // Set variant: 100

  return r.slice(0, 4).reduce(hex, '') + r.slice(4, 6).reduce(hex, '-') + r.slice(6, 8).reduce(hex, '-') + r.slice(8, 10).reduce(hex, '-') + r.slice(10, 16).reduce(hex, '-');
}

},{}]},{},[1,2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
