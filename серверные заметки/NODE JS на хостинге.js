/* Для посадки Node JS на хостинг, нудно
Что такое сервер - Есть 3 типа серверов. 4й новый.
  1й. "Физический сервер" - это работающий компьютер 24/7 имеющий какие-то характеристики в зависимости от 
                    потребности клиента могут предоставить сборку мощней.
                    Операционная система в основном стоит Ubuntu на которую устанавливается программа Apache через которую
                    и происходит связь с внешним миром. Что бы работал на таком компьютере сайт нужно самостоятельно
                    писать backend и frontend код и запускать сервер.
                    Обычно используют большие компании где к сайту подключаются около 30к людей в день. 
           Здесь компьютер обычно под рукой, делай что хочешь. Меняй комплектующие и ставь программы. 
           
  2й. "VPS/VDS" - это виртуальный частный/выделенный сервер. Это когда "Физический компьютер" разбивают программой на виртуальные компьютеры
                  выделяя им какую то мощность от физического компьютера. В зависимости от тарифа могут например виртуальному компьютеру 
                  добавить пространства диска под файлы или частоту процессора или объём оперативной памяти.
                  Нам так же придётся писать backend и frontend код и запускать наш сервер.
                  Сервер подойдёт от 1к посетителей в сутки до 30к.
        Здесь можно управлять полностью виртуальной системой. Переустанавливать Windows и настраивать любой сервер. 
                  
  3й. "Виртуальный хостинг" - это когда ресурсы одного сервера делят на множество сайтов. Часть ресурсов ограничивается строго,
                              другая зависит от соседних сайтов. Если на их сайт пойдёт большая нагрузка, наш сайт может начать 
                              тормозить. 
                              Как я понимаю с таким видом сервера предоставляют минимальный, подходящий во многих случаях всем готовый код backend.
                              Всё это завёрнуто в графическую обёртку на сайте. Достаточно написать frontend и указать путь к папкам
                              и сайт будет работать. 
                  Здесь нельзя переустанавливать windows, удалять какие либо приложения, серверная часть полностью контролируется хостингом.


  4й. "Облачный сервис" - Легко и быстро находясь на одном сервисе увеличить ресурсы сервера если сайт этого начал требовать и уменьшать если сайту
                          этого не надо. Пример нахлынуло кучу посетителей мощность сервера может возрасти автоматически и снизиться если посетители 
                          разошлись.
              Здесь можно управлять полностью виртуальной системой. Переустанавливать Windows и настраивать любой сервер. 
              
  Масштабируемость - это и есть увеличение мощности сервера, то есть выделение мощности компа. на VDS это быстро - просто переключить тариф.
                      На выделенном физическом сервере(а значит берут всю мощность компа) требуется, останавливать сервер и дополнять
                      комп железом. (как я понял на VDS тоже можно упереться в потолок тарифов)  
  
  


  Сервер это программа которая при запуске готова принимать запросы GET POST PUT DELETE и ещё кучу запросов хоть с браузера хоть с консоли
  Есть основные сервера 
  Apache работает на базе скриптовых или веб-ориентированных языков (PHP, Python, Tcl, Ruby, Perl, ASP)
  NGINX - не способен работать с динамическими запросами, поэтому работает со статичными сайтами, 

  Lighttpd - на языке С. «Лайти» создавалось для одновременных подключений к серверу более 10к человек. 
             В числе компаний, использующих Lighttpd, такие гиганты, как Google, Википедия, Яндекс и Ubuntu.
             Поддерживает технологии FastCGI, SCGI, HTTP proxy, Auth, перезаписи URL и AJP 

  Microsoft IIS - Его часто выбирают те, чьи ресурсы работают на движке ASP.NET и используют скриптовый язык ASPX
                  Главный недостаток – жесткая привязка к операционной системе Windows и отсутствие версий для Unix/Linux.
                  Поддерживает технологии CGI, FastCGI, ISAPI и SSI.
  Apache Tomcat - использует Java 
  
  NODEJS - со своим встроенным сервером и языком JS




Люди, организации предоставляют эти компьютеры рекламируя на сайтах именуемые "Хостинг".
При регистрации на этих сайтах мы имеем Логин и Пароль от этого сайта.
Нам так же дают ip того сервера где можем располагать свои файлы.
Располагать файлы на сервере через сайт можно через удобную панель (существует какое-то их кол-во одна из них cPanel)
что бы не заходить постоянно на сайт можно напрямую через консоль Windows подключиться к 
серверу. Этому способу есть название "SSH протокол для удалённого управления сервером(компьютером)"
работает это с дополнительной установкой программы (их то какое-то кол-во) 
Open SSH например (На Windows 10 уже встроена программа, проверить ssh -v). 

Что бы непосредственно подключиться нужен login, ip сервера и пароль(не от хоста) который должен сгенерироваться хостом и прислать на почту.
root@ip
Протокол ssh похож на протокол Telnet и rlogin, но в отличие от них шифрует весь трафик


Предположим все файлы перекинули и всё наладили, переходить на наш сайт можно будет только по ip предоставленным
хостингом. Что бы использовать какое-то имя вместо ip нужен домен(domain). На одном ip может быть несколько имён(domain) - это
значит что сайтов, 1 компьютере который имеет свой ip, может быть больше одного
 

  Есть в интернете сайты которые предоставляют свои сервера ()
  1. Режим VDS на хостинге (VPS вроде тож самое)
  2. Хостинг предоставляет ip адрес компа будет на операционной системе Ubuntu
  2.  и доступ к этому компу
      получаем через логин пароль ssh (работа через консоль)
  3. По
*/



/*###---<{  удалённые команды и настройка операционной системой ubuntu на сервере }>---### */
/*
  Команды Ubuntu
  sudo - делаем установку чего либо от Администратора.
  nano - даёт возможность редактировать файл, ещё видел пишут vim. Сохранить файл wq 
  apt-get - встроенный менеджер пакетов 
  


Ubuntu 20.04 установка node js
  Что бы зайти через ssh пишется в консоли ssh root@вводим ip, пароля нет

1. sudo apt-get update - обновление операционной системы Ubuntu. Вроде ещё ставят  sudo apt-get upgrade
2. sudo apt-get install git curl - установка 2х пакетов git - чтоб получить репозиторий и curl чтоб установить node js
                              (читать док. ubuntu nodejs)




1. curl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -   -(тире в конце должен быть) получить (скачать) более новую версию ноды. Посмотреть setup_15.x может нужна новая
2. sudo apt-get install -y nodejs   - теперь установить пакет
3. node -v, npm -v  - проверяем ноду и её менеджер пакетов 
4. действовать в ubuntu от пользователя root не хорошая практика, нужно создать нового.
    В консоли: 
      adduser имя пользователя . Предложит создать пароль и повторить.
               далее нужно добавить пользователя в группу sudo что бы выполнял команды требующие права админа
      adduser имя sudo
5. нужно будет перезайти в нового пользователя ssh имя@наш ip enter пароль
6. создать папку. Если есть папка Home то там создать:  mkdir www, перейдём: cd www, клонируем репозиторий: git clone -b node http://....git  имя репозитория,
   перейти в репозиторий: cd имя и ставим зависимости npm i.
   
7. редактировать файлы в консоли нужно указывать: nano ./путь до файла. Например если в config.js
   указан "port": "3000" и "host": "localhost" то нужно изменить как минимум host, указать или домен или ip сервера 
   или 0.0.0.0 - автоматом определит ip

8. запуск файла.(всё как обычно на localhost) index.js(или express.js короче наш файл) или через node index.js или то npm то что в package.json

9. Если по каким-то причинам операционная система будет перезагружена, то нужно будет заходить на сервер и запускать
   руками снова сайт или настроить запуск автоматически. Есть пакет в npm  pm2.
   в Консоли:
   sudo npm i pm2 -g
   pm2 start ./index.js  --name="имя нашего клонированного проекта" - это запустить
   pm2 save - это запомнить
   pm2 startup ubuntu - генерирует строку запуска, копируем и далее выполняем
   sudo строка
   sudo reboot  - перезагрузим сервер что бы проверить автоматический запуск

*/

/*
  В ubuntu есть скрипты которые могут работать автоматически(называют их демоны - daemons видимо исполнение файла без рук пользователя сила рук демона )
  в папке корне ubuntu  cd /etc/init.d  далее проверим содержимое набрав dir
*/


/*########-------<{ Установка сервера NGINX + NODEJS }>--------#########

  У NODEJS есть свой сервер, но иногда связывают 2 сервера

1. sudo apt-get update, sudo apt-get upgrade  - обновление операционной системы Ubuntu и (upgrade) какой-то пока не знаю
2. sudo apt install nginx - установка сервера
3. Если есть сертификат ssl установить
4. sudo apt-get install git curl - установка 2х пакетов git - чтоб получить репозиторий и curl чтоб установить node js
                              (читать док. ubuntu nodejs)
5. curl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -   = скачать пакет nodejs
6. sudo apt-get install -y nodejs   - теперь установить пакет
  после установки nodejs есть доступ к npm.
7. sudo npm install pm2 -g  - пакет что бы запускать автоматически сервер если комп перезагрузился у хостинга
8. npm init




После того как установили все зависимости для nodejs и запустили сервер мы можем переходить введя ip хоста и port
  Пример: 95.213.224.21:3000
Переходить на сайт так не удобно нужен доменное имя, например получаем на reg.ru, но как я понял будет не достаточно 
указать nodejs ip с портом в надежде что теперь мы будет переходить по домену, а попадать на этот ip. (надо проверить).
Дополнительно устанавливают nginx и правят его конфиг, в консоли вводят:

    sudo nano /etc/nginx/sites-available/default - изначально файл default есть так что сразу переходим к редактированию

Код для конфига:

server {
        listen 80;
        listen [::]:80;

        root /var/www/html;

        index index.html index.htm index.nginx-debian.html;

        server_name указываем доменное имя;

        location / {
                proxy_pass http://localhost:ваш_порт; //тут оставляют localhost
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
        }

}

Перезагрузка сервера Nginx: sudo service nginx restart

Для каждого сайта нужен новый конфигурационный файл конфига:
  cd /etc/nginx/sites-available - перешли в папку
  nano название_вашего_конфига (например my_conf_for_site)  - создаём конфиг файла

sudo ln -s /etc/nginx/sites-available/название_вашего_конфига /etc/nginx/sites-enabled/  - активируем его 



*/









/*########--------<{ О базах данных }>-------######### */
/*
  MySQL, MariaDB - это sql базы. Они работают из панели phpMyAdmin. Чем новей версия тем больше фич и типов данных добавлена.  
  phpMyAdmin - пакет для обращения (mySql + Sequelize) - обычная табличная и бесплатная. Такие базы называют "Реляционная"
  mongoDB - пакет для обращения mongoose. кластерная база и платная для продакш, но есть пакет бесплатный для тренировки. 
            Требуется просто зарегистрироваться на сайте mongoDB.
            При создании кластера нужно получить строчку подключения и воспользоваться
            в её методе connect 
*/



