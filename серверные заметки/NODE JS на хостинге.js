/*###---<{  удалённые команды и настройка операционной системой ubuntu на сервере }>---### */
/*
  Команды Ubuntu
  sudo - делаем установку чего либо от Администратора.
  nano - даёт возможность редактировать файл, ещё видел пишут vim. Сохранить файл wq 
  apt-get - встроенный менеджер пакетов 
  


Ubuntu 20.04 установка node js. Если работает от root то sudo опустить
  Что бы зайти через ssh пишется в консоли ssh root@вводим ip, пароля нет

1. sudo apt-get update - обновление операционной системы Ubuntu. Вроде ещё ставят  sudo apt-get upgrade
2. sudo apt-get install git curl - установка 2х пакетов git - чтоб получить репозиторий и curl чтоб установить node js
                              (читать док. ubuntu nodejs)


Почему нужен curl? потому-что в пакетном менеджере ubuntu нет nodejs

1. curl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -   -(тире в конце должен быть) получить (скачать) более новую версию ноды. Посмотреть setup_15.x может нужна новая
                                                                      nodejs добавляется в пакетный менеджер. проверить можно apt search nodejs
2. sudo apt-get install -y nodejs   - теперь установить пакет
3. node -v, npm -v  - проверяем ноду и её менеджер пакетов 
4. действовать в ubuntu от пользователя root не хорошая практика, нужно создать нового.
    В консоли: 
      adduser имя пользователя . Предложит создать пароль и повторить.
               далее нужно добавить пользователя в группу sudo что бы выполнял команды требующие права админа
      adduser имя sudo
5. нужно будет перезайти в нового пользователя ssh имя@наш ip enter пароль
6. создать папку. Если есть папка Home то там создать:  mkdir www, перейдём: cd www, клонируем репозиторий: git clone -b node http://....git  имя репозитория,
   перейти в репозиторий: cd имя и ставим зависимости npm i.
   
7. редактировать файлы в консоли нужно указывать: nano ./путь до файла. Например если в config.js
   указан "port": "3000" и "host": "localhost" то нужно изменить как минимум host, указать или домен или ip сервера 
   или 0.0.0.0 - автоматом определит ip

8. запуск файла.(всё как обычно на localhost) index.js(или express.js короче наш файл) или через node index.js или то npm то что в package.json

9. Если по каким-то причинам операционная система будет перезагружена, то нужно будет заходить на сервер и запускать
   руками снова сайт или настроить запуск автоматически. Есть пакет в npm  pm2.
   в Консоли:
   sudo npm i pm2 -g
   pm2 start ./index.js  --name="имя нашего клонированного проекта" - это запустить
   pm2 save - это запомнить
   pm2 startup ubuntu - генерирует строку запуска, копируем и далее выполняем
   sudo строка
   sudo reboot  - перезагрузим сервер что бы проверить автоматический запуск

*/

/*
  В ubuntu есть скрипты которые могут работать автоматически(называют их демоны - daemons видимо исполнение файла без рук пользователя сила рук демона )
  в папке корне ubuntu  cd /etc/init.d  далее проверим содержимое набрав dir
*/


/*########-------<{ Установка сервера NGINX + NODEJS }>--------#########

  У NODEJS есть свой сервер, но иногда связывают 2 сервера

1. sudo apt-get update, sudo apt-get upgrade  - обновление операционной системы Ubuntu и (upgrade) какой-то пока не знаю
2. sudo apt install nginx - установка сервера
3. Если есть сертификат ssl установить
4. sudo apt-get install git curl - установка 2х пакетов git - чтоб получить репозиторий и curl чтоб установить node js
                              (читать док. ubuntu nodejs)
5. curl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -   = скачать пакет nodejs
6. sudo apt-get install -y nodejs   - теперь установить пакет
  после установки nodejs есть доступ к npm.
7. sudo npm install pm2 -g  - пакет что бы запускать автоматически сервер если комп перезагрузился у хостинга
8. npm init




После того как установили все зависимости для nodejs и запустили сервер мы можем переходить введя ip хоста и port
  Пример: 95.213.224.21:3000
Переходить на сайт так не удобно нужен доменное имя, например получаем на reg.ru, но как я понял будет не достаточно 
указать nodejs ip с портом в надежде что теперь мы будет переходить по домену, а попадать на этот ip. (надо проверить).
Дополнительно устанавливают nginx и правят его конфиг, в консоли вводят:

    sudo nano /etc/nginx/sites-available/default - изначально файл default есть так что сразу переходим к редактированию

Код для конфига:

server {
        listen 80;
        listen [::]:80;

        root /var/www/html;

        index index.html index.htm index.nginx-debian.html;

        server_name указываем доменное имя;

        location / {
                proxy_pass http://localhost:ваш_порт; //тут оставляют localhost
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
        }

}

Перезагрузка сервера Nginx: sudo service nginx restart

Для каждого сайта нужен новый конфигурационный файл конфига:
  cd /etc/nginx/sites-available - перешли в папку
  nano название_вашего_конфига (например my_conf_for_site)  - создаём конфиг файла

sudo ln -s /etc/nginx/sites-available/название_вашего_конфига /etc/nginx/sites-enabled/  - активируем его 



*/









/*########--------<{ О базах данных }>-------######### */
/*
  MySQL, MariaDB - это sql базы. Они работают из панели phpMyAdmin. Чем новей версия тем больше фич и типов данных добавлена.  
  phpMyAdmin - пакет для обращения (mySql + Sequelize) - обычная табличная и бесплатная. Такие базы называют "Реляционная"
  mongoDB - пакет для обращения mongoose. кластерная база и платная для продакш, но есть пакет бесплатный для тренировки. 
            Требуется просто зарегистрироваться на сайте mongoDB.
            При создании кластера нужно получить строчку подключения и воспользоваться
            в её методе connect 
*/



