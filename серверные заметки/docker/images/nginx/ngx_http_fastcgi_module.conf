
# CGI - это программа которая запускается на сервере при запросе клиента.
#       Тело запроса в эту программу передаётся через STDIN. Программа 
#       обрабатывает запрос, если надо обращаеться в БД и возвращает 
#       ответ через STDOUT и звкрывается
# FastCGI - делает тоже самое только 1 раз включается и не выключается
#           разгружая тем самым сервер. Соединение сервером на котором лежит
#           приложение и сервером NGINX через FastCGI осуществляеться через Socket.   
#           Главная мысль использования FastCGI это обращаться к серверу на котором лежит php
#           файлы.

#  Можно поставить NGINX и Apache и проксировать запросы на Apache. Собственно Apache будет помогать
#  обрабатывать php файлы т.к. NGINX их не понимает, но такой подход не очень т.к. есть замена
#  пошустрей. Вместо Apache ставят php8 и php8-fpm. Есть 2 варианта. Или мы ставим эти пакеты
#  в контейнере с NGINX предварительно настроив php8-fpm на 127.0.0.1:9000 и тогда php файлы храним 
#  там где NGINX велел (/usr/share/nginx/html может быть и /var/www/html) настройка
#  NGINX 

server {
  listen 80 default_server;
  error_page 404 =200 /404.php;
  root /usr/share/nginx/html;

  location / {   
    index index.php index.html;
  }

  location ~ \.php$ {
    fastcgi_pass  127.0.0.1:9000;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;          
    include /etc/nginx/fastcgi_params;
  } 
}
#  SCRIPT_FILENAME - играет важную роль. т.к. NHINX и php8-fpm в одном контейнере, то  
#  $document_root$fastcgi_script_name  = /usr/share/nginx/html URI
#  При запросе на domain.ru/test/ отрабатывает location / { }, она заглянет в папку /usr/share/nginx/html/test/
#  найдёт там index.php, выстроит URI /test/index.php снова начнёт перебирать location и попадёт в 
#  location ~ \.php$,  передаст запрос программе php8-fpm на 127.0.0.1:9000/test/index.php с указанием где искать файл 
#  /usr/share/nginx/html/test/index.php она найдёт файл и обработает вернув index.html.

# За ранее говорю такой подход не оправдал мои ожидания т.к. приходиться хранить файлы от одного проекта в разных контейнерах
# т.к. при запросе php файла он должен отдаваться из php8-fpm контейнера, а стили почему-то не подтягиваются, 
# но стили в NGINX контейнере отдаются. 

 php-fpm:
    image: php:8.0.3-fpm-alpine3.13
    ports: 
      - 9000 # нет смысла прокидыавт порт из контейнера
    volume
      - ./app:/var/www/html
    restart: always
nginx:
    image: nginx:1.19.7-alpine
    ports: 
      - 5000:80
    volumes:   
      - ./app:/var/www/html            
    restart: always

 server{
  listen 80 default_server;
  root /var/www/html; # папка контейнера php-fpm

  include /etc/nginx/fastcgi_params;
  location / {
    fastcgi_pass  php-fpm:9000;
    fastcgi_index index.php;
  }
  location ~ \(js|css|png|jpg|jpeg|gif|ico)$ {}
}
# ------------------------------------------------------------------------------------
# ##########----------<{ php-fpm в одном контейнере с nginx }>----------##########

# Для этого потребуеться собрать контейнер с нужными утилитами в том числе и с утилитой supervisor которая 
# будет при запуске контейнера так же автоматически запускать php-fpm. 

# 1. Собраь DockerFile 
    FROM nginx:1.19.7-alpine
    WORKDIR /usr/share/nginx/html
    RUN apk update && apk add --no-cache php8 php8-fpm openrc mc supervisor php8-pecl-xdebug && \
            openrc && touch /run/openrc/softlevel && touch /etc/network/interfaces 
    ENV TZ=Europe/Moscow
    COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
    CMD supervisord -c /etc/supervisor/conf.d/supervisord.conf
    EXPOSE 80   

# 2. Создать supervisor.conf
    [supervisord]
    nodaemon=true
    user=root

    [program:nginx]
    command=nginx
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0
    daemon=off
    user=root

    [program:php-fpm]
    command=php-fpm8
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0
    daemon=off
    user=root
# 3. Создать build и добавить в docker-compose этот image
# 4. Настройки nginx
server{
  listen 80 default_server;
  root /var/www/html;
  location / {
    index index.html index.php;
  }
  location ~ \.php$ {
    fastcgi_pass 127.0.0.1:9000;
    include /etc/nginx/fastcgi.conf; 
    fastcgi_index index.php;
  }
}




# ------------------------------------------------------------------------------------
server{
# Кнт: http, server, location
  fastcgi_index index.php;                    # Нужно указывать если php файл находиться в другом контейнере или сервре. Директива index
                                              # ищет у себя в контейнере.
  fastcgi_bind адрес [transparent] | off      # по описанию кажеться что замена fastcgi_pass, но на деле тишина. Инфы 0.
  fastcgi_buffering on;                       # вкл | вык буферного хранилища в nginx при запросах к fastcgi серверу. Когда делаеться запрос php
                                              # файла, nginx ответ от fastcgi сервера соханит в буфере. Следующий запрос выдаст из буфера. 

# Буферы не знаю каким способом посмотреть, остаёться предполагать что они есть.
  fastcgi_buffers 8 4k|8k;                    # максимальное число и размер буферов для одного соединения, в которые будет передаваться для хранения ответ от FastCGI сервера,
                                              # и отдаёться клиету из NGINX. минимальное число буферов 2.
  fastcgi_buffer_size 4k|8k;                  # Эта директива служит для принятия 1го ответа с заголовками от fastcgi сервера.Можем выжелить размер
                                              # от основного размера выставленного в fastcgi_buffers
                                              # размер буфера не может превышать ограничения выставленного в fastcgi_busy_buffers_size

# Как всегда в документации написана какая-то непонятная ебанина. Написано что fastcgi_busy_buffers_size  "ограничивает сумарный размер буферов", на деле
# fastcgi_buffers директива на самом деле выступает в роли ограничителя для fastcgi_busy_buffers_size. Пишу исходя из тестов.
# 

  fastcgi_busy_buffers_size 8k|16k;           # Эта директива не должна превышать ("размер" * "число" - "размер") в fastcgi_buffers. 
                                              # Как я понял выставляем размер от суммы расчитанной по формуле, при заполнении которого
                                              # будет сразу же отсылаться ответ клиенту, а оставшаяся память будет принимать овет из FastCGI сервера 

  fastcgi_cache
  fastcgi_cache_background_update
  fastcgi_cache_bypass
  fastcgi_cache_key
  fastcgi_cache_lock
  fastcgi_cache_lock_age
  fastcgi_cache_lock_timeout
  fastcgi_cache_max_range_offset
  fastcgi_cache_methods
  fastcgi_cache_min_uses
  fastcgi_cache_path
  fastcgi_cache_purge
  fastcgi_cache_revalidate
  fastcgi_cache_use_stale
  fastcgi_cache_valid
  fastcgi_catch_stderr
  fastcgi_connect_timeout
  fastcgi_force_ranges
  fastcgi_hide_header
  fastcgi_ignore_client_abort
  fastcgi_ignore_headers
  
  fastcgi_intercept_errors
  fastcgi_keep_conn
  fastcgi_limit_rate
  fastcgi_max_temp_file_size
  fastcgi_next_upstream
  fastcgi_next_upstream_timeout
  fastcgi_next_upstream_tries
  fastcgi_no_cache
  fastcgi_param
  fastcgi_pass
  fastcgi_pass_header
  fastcgi_pass_request_body
  fastcgi_pass_request_headers
  fastcgi_read_timeout
  fastcgi_request_buffering
  fastcgi_send_lowat
  fastcgi_send_timeout
  fastcgi_socket_keepalive
  fastcgi_split_path_info
  fastcgi_store
  fastcgi_store_access
  fastcgi_temp_file_write_size
  fastcgi_temp_path
}


   