# Кнт: http, server, location, if в location
# gzip сжимает ответ от сервера. В Network можно увидеть как файлы станут весить меньше. 

# По всей видимости сервер кодирует самостоятельно файлы index.html добавляя всем запрошеным файлам .gz. 
# Браузер раскодирует данный формат. ie6 не поддерживает технологию.

# ВАЖНО: указанные ниже "gzip on" методы это перечисление всевозможных вариантов при которых должно сработает сжатие.
#        Если хоть одно условие не подходит для файла то сжатия не будет, при условии что метод находит заголовок на который смотрит. 
#        Например заголовка Content-Length может и не быть, зато указанный gzip_types совпадает и сжатие будет, но если есть заголовок
#        и он больше указанного значения gzip_min_length, то сжатие не будет хоть и mime-type указан в gzip_types.

# Текстовые файлы сжимаются хорошо, JPEG или PNG уже сжаты по своей природе и большого результата не будет. 
# Сжимал картинки через brotli для brotli_static, всё работало. С картинками в gz формате были неувязки. 


gzip            off;                        # поддержка GZIP сжатия
gzip_http_version 1.1;                      # устанавливает минимальную HTTP-версию запроса
gzip_vary off;                              # отправить заголовк ответа Vary: Accept-Encoding если используеться сжатие: gzip, gzip_static gzip

gzip_comp_level 1;                          # Степень сжатия. 1-9. Выше 5 нет практически эффекта.
gzip_min_length 20;                         # минимальная длинна заголовка ответа "Content-Length" (в байтах) при котором хотим сжимать.      
                                            # можно оставить по ум. сжимать будем при любом размере весе контента
gzip_types text/plain application/xml;      # на каком mime-type должно отработать сжатие      

gzip_disable regex ...;                     # не будет сжимать данные для браузеров в которых заголовок запроса User-Agent 
                                            # совпадёт с рег выражением.
gzip_proxied  off expired no-cache          # Якобы разрешает или запрещает сжатие для проксируемого сервера.
              no-etag no-store              # Сказано добавить заголовок "Via" для прокси сервера. Как я не тыкал
              private auth;                 # запретить сжимать у меня не вышло. Да и особо то запрещать мне не нужно.
gzip_buffers 32 4k|16 8k;                   # Задаёт число и размер буферов


# -----------------------------------------------------------------------------------------------------
# ######--------<{ о буферах }>----------########
# Буферы - это хранение информации в оперативной памяти. Буферы имеют размер. Можно данные хранить и на диске. 
# Размер буферов задается в зависимости от количества доступных серверу ресурсов. Если их много значения можно можно увеличивать.
# ПОДРОБНЕЕ В ngx_http_core_module


# -----------------------------------------------------------------------------------------------------
# ######--------<{ ngx_http_gzip_static_module }>----------########
# Задумка данного модуля снизить нагрузку с cpu. При запросе gzip постоянно сжимает нагружая проц.
# Если запросов очень много то и нагрузка возростает. Так зачем нам по 100 раз сжимать если можно изначально сжать файлы в .gz
# и включить gzip_static. который будет отправлять index.html.gz, style.css.gz и тому подобные файлы. 
# Некоторые оставляют как сжатый так и не сжатый вариант. Сжать файлы можно через tar, но не нужно указывать так: style.tar.gz
# иначе не сработает.
# Модуль требует подключения --with-http_gzip_static_module

gzip_static on | off | always;              # on - ищет сжатый файл и проверяет на клиенте поддержку сжатия. 
                                            # always - не проверяет клиента, а просто отправляет gz файл. Полезно если мы не держим не сжатые файлы. 
                                            # off - не отправляет сжатые нами файлы, но если gzip on то будет сам сжимать
#   Заголовки при сжатии 
# Vary: Accept-Encoding
# Content-Encoding: gzip
# Content-Length: 1241   появляеться в gzip_static. Видимо браузер распаковывает и добавляет т.к. 
#                        при использовании gzip on этого заоловка нет.

# Transfer-Encoding: chunked   появиться если отработал gzip on, а не gzip_static on

# -----------------------------------------------------------------------------------------------------
# ######--------<{ brotli }>----------########
# Модуль сторонний и работает чуть лучше gzip. Что бы его установить придёться пересобрать ngixn с добавив 
# модуль в ./configure ... --add-module=путь_к_brotli или же использовать как динамический модуль
# об это в файле nginx.js "Сборка nginx с новыми модулями"
# brotli имеет чуть меньше функций

# Кнт: http, server, location, if
brotli_static on|off|always                   # Расширение должно быть .br которое создаёться через компресор brotli -6 файл.css

brotli            off;                        # поддержка GZIP сжатия
brotli_comp_level 6;                          # Степень сжатия. 0-11. Выше 5 нет практически эффекта.
brotli_min_length 20;                         # минимальная длинна заголовка ответа "Content-Length" (в байтах) при котором хотим сжимать.      
                                              # можно оставить по ум. сжимать будем при любом размере контента
brotli_types text/plain application/xml;      # на каком mime-type должно отработать сжатие      
$brotli_ratio                                 # переменная


Итого: Можно использовать brotli_static и для подстраховки gzip_static, предварительно сжав файлы в .br и .gz 

# -----------------------------------------------------------------------------------------------------
# ######--------<{ ngx_http_gunzip_module }>----------########
# Модуль нужен в том случае если мы храним только сжатые файлы в gz формате т.к. это экономит место на серве
# и отправляет их через gzip_static. Но вдруг браузер у клиента не поддерживает сжатие. У нас 2 варианта:
# 1. Хранить сжатые и не сжатые файлы для таких случаев и если данные не попадают под условия:
#    gzip_http_version, gzip_proxied и gzip_disable, то отдаються несжатые файлы
# 2. Экономим место, храним только сжатые и указав gunzip файлы которые не подходит под условия
#    gzip_http_version, gzip_proxied и gzip_disable будут расжиматься. Это в основном обладатели ie.

# Кнт:	http, server, location
gunzip off;                               # (on) Разрешает|(off) запрещает распаковку ответов для клиентов, 
                                          # которые не поддерживают сжатые файлы. 
gunzip_buffers 32 4k|16 8k;               # Задаёт число и размер буферов, в которые будет разжиматься ответ.